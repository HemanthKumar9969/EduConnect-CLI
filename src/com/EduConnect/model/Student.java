package com.EduConnect.model; // Declares this file belongs to the 'model' subpackage under 'com.EduConnect'

import java.sql.Date; // Imports java.sql.Date for handling date values compatible with SQL databases

/**
 * Represents a Student entity in the EduConnect application.
 * This class encapsulates the data for a student, providing private attributes
 * and public getter/setter methods (Encapsulation).
 */
public class Student {
    // Private attributes: Data is hidden and can only be accessed/modified via methods.
    private int studentId;
    private String name;
    private String email;
    private String phone;
    private Date dob;       // Date of Birth, using java.sql.Date
    private String gender;

    /** Default constructor: Used when creating a Student object without initial values. */
    public Student() {}

    /**
     * Constructor for creating a NEW student object.
     * The 'studentId' is typically auto-generated by the database, so it's not included here.
     */
    public Student(String name, String email, String phone, Date dob, String gender) {
        this.name = name;      // 'this.name' refers to the object's attribute, 'name' is the parameter.
        this.email = email;
        this.phone = phone;
        this.dob = dob;
        this.gender = gender;
    }

    /**
     * Constructor for creating a Student object FROM existing database data.
     * Includes 'studentId' as it's already assigned by the database.
     */
    public Student(int studentId, String name, String email, String phone, Date dob, String gender) {
        this.studentId = studentId; // Assigns the provided ID to the object's attribute.
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.dob = dob;
        this.gender = gender;
    }

    // --- Getter Methods: Provide read-only access to private attributes. ---
    public int getStudentId() { return studentId; }
    public String getName() { return name; }
    public String getEmail() { return email; }
    public String getPhone() { return phone; }
    public Date getDob() { return dob; }
    public String getGender() { return gender; }

    // --- Setter Methods: Provide controlled write access to private attributes. ---
    public void setStudentId(int studentId) { this.studentId = studentId; } // Can be used if ID needs to be set after insertion.
    public void setName(String name) { this.name = name; }
    public void setEmail(String email) { this.email = email; }
    public void setPhone(String phone) { this.phone = phone; }
    public void setDob(Date dob) { this.dob = dob; }
    public void setGender(String gender) { this.gender = gender; }

    /**
     * Overrides the default `toString()` method for easy object representation.
     * When you print a Student object (e.g., `System.out.println(myStudent);`), this method is called.
     */
    @Override // Annotation indicating this method overrides a method from a superclass (Object in this case).
    public String toString() {
        return "ID: " + studentId + ", Name: " + name + ", Email: " + email +
               ", Phone: " + phone + ", DOB: " + dob + ", Gender: " + gender;
    }
}
